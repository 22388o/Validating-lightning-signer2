syntax = "proto3";

package remotesigner;

// Glossary:
// - Holder - the local lightning node
// - Counterparty - the peer on the relevant channel
// - Phase 1 / Phase 2 - versions of this API (see below)

// Phase 1 API
// -----------
//
// In this phase, transactions are provided in serialized form to the
// signer.  There is also a somewhat redundant passing of
// channel-constant values into specific signing requests.
//
// In phase 2, transactions will be constructed on the signer from
// detailed information, such as amounts, to_self_delay, etc. .  See
// the Phase 2 section near the end of this file for a sketch.

service Signer {
  // Trivial call to test connectivity
  rpc Ping (PingRequest)
    returns (PingReply);

  // Provision a signer for a new node
  rpc Init (InitRequest)
    returns (InitReply);

  // List nodes
  rpc ListNodes (ListNodesRequest)
      returns (ListNodesReply);

  // List channels for a node
  rpc ListChannels (ListChannelsRequest)
      returns (ListChannelsReply);

  // List allowlisted addresses for a node
  rpc ListAllowlist (ListAllowlistRequest)
      returns (ListAllowlistReply);

  // Add addresses to a node's allowlist
  rpc AddAllowlist (AddAllowlistRequest)
      returns (AddAllowlistReply);

  // Remove addresses from a node's allowlist
  rpc RemoveAllowlist (RemoveAllowlistRequest)
      returns (RemoveAllowlistReply);

  // Get layer-1 XPUB for a node.
  rpc GetExtPubKey (GetExtPubKeyRequest)
    returns (GetExtPubKeyReply);
  
  // BOLT #2 - Peer Protocol - allocate a new channel
  rpc NewChannel (NewChannelRequest)
    returns (NewChannelReply);

  // BOLT #2 - Peer Protocol
  // Memorize remote basepoints and funding outpoint Signatures can
  // only be requested after this call.
  rpc ReadyChannel (ReadyChannelRequest)
    returns (ReadyChannelReply);

  // BOLT #2 - Channel Close - phase 1
  // No further commitments will be signed.
  rpc SignMutualCloseTx (SignMutualCloseTxRequest)
    returns (SignatureReply);

  // BOLT #2 - Channel Close - phase 2
  // No further commitments will be signed.
  rpc SignMutualCloseTxPhase2 (SignMutualCloseTxPhase2Request)
    returns (CloseTxSignatureReply);

  // BOLT #2 - Message Retransmission
  // Used to recover from local data loss by checking that our secret
  // provided by the peer is correct.
  //
  // WARNING: this does not guarantee that the peer provided us the
  // latest secret, and if in fact the peer lied they will take all of
  // the funds in the channel.
  rpc CheckFutureSecret (CheckFutureSecretRequest)
    returns (CheckFutureSecretReply);

  // BOLT #3 - Key Derivation
  // Get our channel basepoints and funding pubkey
  rpc GetChannelBasepoints (GetChannelBasepointsRequest)
    returns (GetChannelBasepointsReply);

  // BOLT #3 - Per-commitment Secret Requirements
  // Get our current per-commitment point and the secret for the point
  // at commitment n-2.  The release of the secret for n-2 effectively
  // revokes that commitment, and it cannot be signed.  It is an error
  // if the n-2 commitment was already signed.
  rpc GetPerCommitmentPoint (GetPerCommitmentPointRequest)
    returns (GetPerCommitmentPointReply);

  // BOLT #3 - Funding Transaction
  // Sign the funding transaction
  // TODO this must be done after we know the remote signature on the
  // commitment tx - need to provide this to the signer.
  rpc SignFundingTx (SignFundingTxRequest)
    returns (SignFundingTxReply);

  // BOLT #3 - Commitment Transaction, phase 1
  // Sign the counterparty's commitment tx, at commitment time.
  // The signature is provided to the counterparty.
  rpc SignCounterpartyCommitmentTx (SignCounterpartyCommitmentTxRequest)
    returns (SignatureReply);

  // BOLT #3 - Commitment Transaction and attached HTLCs, phase 2
  // Sign the counterparty commitment tx and attached HTLCs, at
  // commitment time
  rpc SignCounterpartyCommitmentTxPhase2 (SignCounterpartyCommitmentTxPhase2Request)
    returns (CommitmentTxSignatureReply);

  // BOLT #3 - Commitment Transaction and attached HTLCs
  // Validate the counterparty's commitment and HTLC signatures when
  // commitment_signed received.  Returns the next
  // per_commitment_point and the holder's revocation secret for the
  // prior commitment.  This method advances the expected next
  // commitment number in the signer's state.
  rpc ValidateHolderCommitmentTx (ValidateHolderCommitmentTxRequest)
    returns (ValidateHolderCommitmentTxReply);

  // BOLT #2 Validate the counterparty's per_commitment_secret from
  // the revoke_and_ack message.
  // TODO - describe the signer state change when this method is invoked.
  rpc ValidateCounterpartyRevocation (ValidateCounterpartyRevocationRequest)
    returns (ValidateCounterpartyRevocationReply);
  
  // BOLT #3 - Commitment Transaction, , phase 1
  // Sign the holder's commitment tx, at force-close time.  No further
  // commitments can be signed on this channel.  The commitment must
  // not have been revoked.
  rpc SignHolderCommitmentTx (SignHolderCommitmentTxRequest)
    returns (SignatureReply);

  // BOLT #3 - Commitment Transaction and attached HTLCs, phase 2
  // Sign the holder's commitment tx and attached HTLCs, at
  // force-close time.  No further commitments can be signed on this
  // channel.  The commitment must not have been revoked.
  rpc SignHolderCommitmentTxPhase2 (SignHolderCommitmentTxPhase2Request)
    returns (CommitmentTxSignatureReply);

  // BOLT #3 - HTLC Outputs, phase 1
  // Sign an HTLC-Success or HTLC-Timeout tx spending a holder's HTLC
  // output, at force-close time
  rpc SignHolderHTLCTx (SignHolderHTLCTxRequest)
    returns (SignatureReply);

  // BOLT #5 - Unilateral Close Handling, phase 1
  // Sign a tx input sweeping a delayed output - either from the
  // commitment tx's to_local output at force-close time or from an
  // HTLC Success or HTLC Timeout second-level tx.
  rpc SignDelayedSweep (SignDelayedSweepRequest)
    returns (SignatureReply);

  // BOLT #3 - HTLC Outputs, phase 1
  // Sign a counterparty HTLC tx, at commitment time.
  // This can be either an HTLC-Success or HTLC-Timeout tx.
  // The signature is provided to the counterparty.
  rpc SignCounterpartyHTLCTx (SignCounterpartyHTLCTxRequest)
    returns (SignatureReply);

  // BOLT #3 - HTLC Outputs, phase 1
  // Sign a tx input sweeping the to_remote output of the commitment
  // tx after the channel has been force-closed by our counterparty.
  rpc SignCounterpartyHTLCSweep (SignCounterpartyHTLCSweepRequest)
    returns (SignatureReply);

  // BOLT #5 - Unilateral Close Handling, phase 1
  // Sign a justice tx input to us after the counterparty has
  // broadcast a revoked commitment.  This signature applies to the
  // following outputs:
  // - counterparty's to_local commitment tx output
  // - counterparty's offered HTLC output prior to their HTLC Timeout tx
  // - counterparty's received HTLC output prior to their HTLC Success tx
  // - counterparty's HTLC Timeout second-level tx output
  // - counterparty's HTLC Success second-level tx output
  rpc SignJusticeSweep (SignJusticeSweepRequest)
    returns (SignatureReply);

  // BOLT #7 - channel_announcement
  rpc SignChannelAnnouncement (SignChannelAnnouncementRequest)
    returns (SignChannelAnnouncementReply);

  // BOLT #7 - node_announcement
  rpc SignNodeAnnouncement (SignNodeAnnouncementRequest)
    returns (NodeSignatureReply);

  // BOLT #7 - channel_update
  rpc SignChannelUpdate (SignChannelUpdateRequest)
    returns (NodeSignatureReply);

  // BOLT #8 - Authenticated Key Agreement Handshake
  rpc ECDH (ECDHRequest)
    returns (ECDHReply);

  // BOLT #11 - Invoice Protocol
  rpc SignInvoice (SignInvoiceRequest)
    returns (RecoverableNodeSignatureReply);

  // BOLT #?? - Sign Message
  rpc SignMessage (SignMessageRequest)
    returns (RecoverableNodeSignatureReply);
}

service Version {
  // Get detailed version information
  rpc Version (VersionRequest) returns (VersionReply);
}

// ----------------------------------------------------------------

message ListNodesRequest {
}

message ListNodesReply {
  repeated NodeId node_ids = 1;
}

message ListChannelsRequest {
  NodeId node_id = 1;
}

message ListChannelsReply {
  repeated ChannelNonce channel_nonces = 1;
}

message ListAllowlistRequest {
  NodeId node_id = 1;
}

message ListAllowlistReply {
  repeated string addresses = 1;
}

message AddAllowlistRequest {
  NodeId node_id = 1;
  repeated string addresses = 2;
}

message AddAllowlistReply {
}

message RemoveAllowlistRequest {
  NodeId node_id = 1;
  repeated string addresses = 2;
}

message RemoveAllowlistReply {
}

message PingRequest {
  string message = 1;
}

message PingReply {
  string message = 1;
}

// Initialize a new Lightning node
message InitRequest {
  NodeConfig node_config = 1;
  
  ChainParams chainparams = 2;

  // Developer field: flush the node state if exists (support for integration tests).
  // This will cause an error if the server was not started with --test-mode and the node exists.
  bool coldstart = 3;

  // Developer field: set the HSM secret rather than generate it on
  // the signer side. Only allowed if this is using a non-production
  // network.
  BIP32Seed hsm_secret = 100;
}

message InitReply {
  NodeId node_id = 1;
}

// FIXME - This interface is specific to c-lightning, it returns the
// XPUB associated with "m/0/0" which won't work for anything else.
message GetExtPubKeyRequest {
  NodeId node_id = 1;
}

message GetExtPubKeyReply {
  ExtPubKey xpub = 1;
}

// Initialize a new channel
message NewChannelRequest {
  NodeId node_id = 1;

  // This is used for key generation, for the temporary channel ID
  // and as a lookup identifier, and must be unique.
  //
  // This is used as a lookup identifier until the channel is established
  // with ReadyChannel.  At ReadyChannel the initial channel nonce may
  // be optionally replaced with a permanent channel nonce for further
  // API calls.
  //
  // NOTE: the internal channel ID is set to the channel nonce hashed
  // with sha256.
  //
  // Optional. A unique pseudo-random one is generated if not specified
  // and will be returned in the reply.
  ChannelNonce channel_nonce0 = 2;
}

message NewChannelReply {
  ChannelNonce channel_nonce0 = 1;
}

// Provide the funding outpoint and information from the counterparty
// This is provided to signer at the point that the funding transaction was created
message ReadyChannelRequest {
  NodeId node_id = 1;

  // The initial channel nonce provided to NewChannel.
  ChannelNonce channel_nonce0 = 2;

  // An optional permanent channel nonce to be used for the rest of
  // the channel's lifetime as the lookup key.  If not provided the initial channel
  // nonce will be used as a lookup key.
  ChannelNonce option_channel_nonce = 3;

  bool is_outbound = 4;

  uint64 channel_value_sat = 5;

  uint64 push_value_msat = 6;

  Outpoint funding_outpoint = 7;

  uint32 holder_selected_contest_delay = 8; // locally imposed remote to_self_delay

  bytes holder_shutdown_script = 9;

  repeated uint32 holder_shutdown_key_path = 10;

  Basepoints counterparty_basepoints = 11;

  uint32 counterparty_selected_contest_delay = 12; // remote imposed local to_self_delay

  bytes counterparty_shutdown_script = 13;

  enum CommitmentType {
    LEGACY = 0;
    STATIC_REMOTEKEY = 1;
    ANCHORS = 2;
  }
  CommitmentType commitment_type = 14;
}

message ReadyChannelReply {
}

// Sign a happy path mutual close transaction
message SignMutualCloseTxRequest {
  NodeId node_id = 1;
    
  ChannelNonce channel_nonce = 2;

  Transaction tx = 3;
}

message SignatureReply {
  BitcoinSignature signature = 1;
}

// Check if the counterparty really knows a secret that we haven't generated
// since being restored from backup.  This proves to us that the state
// of the channel is at least at commitment number `n + 1`
message CheckFutureSecretRequest {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  // commitment number
  uint64 n = 3;

  // our secret that we haven't generated since being restored from
  // backup, but the counterparty claims is part of our shachain
  Secret suggested = 4;
}

message CheckFutureSecretReply {
  bool correct = 1;
}

// Get the basepoints and public keys specific to a channel
message GetChannelBasepointsRequest {
  NodeId node_id = 1;
    
  ChannelNonce channel_nonce = 2;
}

message GetChannelBasepointsReply {
  Basepoints basepoints = 1;
}

// Get the per-commitment point for a specific commitment number
message GetPerCommitmentPointRequest {
  NodeId node_id = 1;
    
  ChannelNonce channel_nonce = 2;

  // commitment number
  uint64 n = 3;
}

message GetPerCommitmentPointReply {
  PubKey per_commitment_point = 1;

  // The revocation of the secret of the n-2 commitment, or None if n < 2
  Secret old_secret = 2;
}

// Sign a funding tx for this channel
// The channel(s) must have been readied
message SignFundingTxRequest {
  NodeId node_id = 1;

  // No channel_nonce.  Funding tx are not associated with a
  // particular channel; they may fund multiple channels at the same
  // time.

  // For validation, tx outputs that are in the wallet (change) should
  // should have the [OutputDescriptor::key_loc.key_path] set.
  Transaction tx = 2;
}

message SignFundingTxReply {
  // Witnesses for each of our inputs.  For inputs that are not
  // ours the elements will be None.
  repeated Witness witnesses = 1;
}

// Sign the counterparty commitment
message SignCounterpartyCommitmentTxRequest {
  NodeId node_id = 1;
  
  ChannelNonce channel_nonce = 2;

  PubKey remote_per_commit_point = 3;
  
  // TODO deprecate and move to specifying all the
  // information that is required to rebuild the tx
  Transaction tx = 4;

  // These are needed in addition to the tx to recompose.
  uint64 commit_num = 5;
  uint32 feerate_sat_per_kw = 6;
  repeated HTLCInfo offered_htlcs = 10;
  repeated HTLCInfo received_htlcs = 11;
}

// Validate the counterparty's signatures
message ValidateHolderCommitmentTxRequest {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  Transaction tx = 3;

  // These are needed in addition to the tx to recompose.
  uint64 commit_num = 5;
  uint32 feerate_sat_per_kw = 6;
  repeated HTLCInfo offered_htlcs = 10;
  repeated HTLCInfo received_htlcs = 11;

  // These signatures for the holder's commitment are provided by the
  // channel peer in the BOLT #2 commitment_signed message.
  BitcoinSignature commit_signature = 20;
  repeated BitcoinSignature htlc_signatures = 21;
}

message ValidateHolderCommitmentTxReply {
  PubKey next_per_commitment_point = 1;

  // The revocation of the secret of the n-2 commitment, or None if n < 2
  Secret old_secret = 2;
}

// Validate the counterparty's revealed per_commitment_secret.
message ValidateCounterpartyRevocationRequest {
  NodeId node_id = 1;
  
  ChannelNonce channel_nonce = 2;

  // The commitment number of the counterparty commitment that the
  // old_secret applied to.  This is generally two less than the
  // expected next counterparty commitment number.
  uint64 revoke_num = 3;

  Secret old_secret = 4;
}

message ValidateCounterpartyRevocationReply {
}

// Force close a channel by signing a holder commitment tx.  The
// channel moves to closing state.
message SignHolderCommitmentTxRequest {
  NodeId node_id = 1;
  
  ChannelNonce channel_nonce = 2;
    
  Transaction tx = 3;

  // These are needed in addition to the tx to recompose.
  uint64 commit_num = 5;
  uint32 feerate_sat_per_kw = 6;
  repeated HTLCInfo offered_htlcs = 10;
  repeated HTLCInfo received_htlcs = 11;
}

// As part of a force close, sweep a holder-broadcast HTLC output hanging off the
// commitment tx
message SignHolderHTLCTxRequest {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  Transaction tx = 3;

  uint64 n = 4;

  PubKey per_commit_point = 5;
}

// As part of a force close, sweep the delayed to-local output hanging
// off the commitment tx or HTLC tx that the holder broadcast
message SignDelayedSweepRequest {
  NodeId node_id = 1;
    
  ChannelNonce channel_nonce = 2;

  Transaction tx = 3;

  // The input index to be signed
  uint32 input = 4;

  uint64 commitment_number = 5;
}

// Sign a counterparty HTLC tx hanging off the counterparty commitment tx
message SignCounterpartyHTLCTxRequest {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  Transaction tx = 3;

  PubKey remote_per_commit_point = 5;
}

// Sweep a counterparty HTLC to us
message SignCounterpartyHTLCSweepRequest {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  Transaction tx = 3;

  // The input index to be signed
  uint32 input = 4;

  PubKey remote_per_commit_point = 5;
}

// Sign a penalty sweep of a counterparty to_local the counterparty has revoked
message SignJusticeSweepRequest {
  NodeId node_id = 1;
    
  ChannelNonce channel_nonce = 2;

  Transaction tx = 3;

  // The input index to be signed
  uint32 input = 4;

  Secret revocation_secret = 5;	// FIXME - should this be remembered instead?
}

// Sign a channel announcement
message SignChannelAnnouncementRequest {
  NodeId node_id = 1;
  
  ChannelNonce channel_nonce = 2;

  // Bytes [258:] of the channel_announcement message in BOLT-7 format
  // (skips the the message type and signature fields)
  bytes channel_announcement = 3;
}

message SignChannelAnnouncementReply {
  ECDSASignature node_signature = 1;

  ECDSASignature bitcoin_signature = 2;
}

// Sign node announcement message
message SignNodeAnnouncementRequest {
  NodeId node_id = 1;

  // Bytes [66:] of the node_announcement message in BOLT-7 format
  // (skips the the message type and signature field)
  bytes node_announcement = 2;
}

message NodeSignatureReply {
  ECDSASignature signature = 1;
}

// Sign channel update message
message SignChannelUpdateRequest {
  // https://github.com/lightningnetwork/lightning-rfc/blob/master/07-routing-gossip.md#the-channel_update-message
  
  NodeId node_id = 1;

  // Bytes [66:] of the channel_update message in BOLT-7 format (skips
  // the the message type and signature field)
  bytes channel_update = 2;
}

// Perform ECDH for p2p communication purposes
message ECDHRequest {
  NodeId node_id = 1;

  // The ephemeral pubkey of the peer
  PubKey point = 2;
}

message ECDHReply {
  Secret shared_secret = 1; // 32 bytes
}

// Sign an invoice with the node secret key
message SignInvoiceRequest {
  // https://github.com/lightningnetwork/lightning-rfc/blob/master/11-payment-encoding.md

  NodeId node_id = 1;

  bytes data_part = 2;

  string human_readable_part = 3;
}

message RecoverableNodeSignatureReply {
  ECDSARecoverableSignature signature = 1;
}

// Sign an ad-hoc message with the node secret key
message SignMessageRequest {
  NodeId node_id = 1;

  // NOTE - The counterparty will prepend the standard prefix
  // "Lightning Signed Message:" so this prefix should not be included
  // here.
  bytes message = 2;
}

message VersionRequest {
}

message VersionReply {
  string version_string = 1;
  uint32 major = 2;
  uint32 minor = 3;
  uint32 patch = 4;
  string prerelease = 5;
  string build_metadata = 6;
}

// ----------------------------------------------------------------

// Node Configuration
message NodeConfig {
  // The KeyDerivationStyle controls how nodeid and HD keys are
  // derived from the seed.  Being compatible with specific node
  // imlementations allows for comparison during integration testing.
  enum KeyDerivationStyle {
    INVALID = 0;
    NATIVE = 1;
    LND = 2;
  }
  KeyDerivationStyle key_derivation_style = 1;
}

// Specify the network (e.g. testnet, mainnet)
message ChainParams {
  string network_name = 1;
}

// Compressed ECDSA public key in DER format derived from the node secret
message NodeId {
  bytes data = 1;
}

// A client-side unique ID for the channel, not necessarily related to
// the BOLT temporary/permanent node ID
message ChannelNonce {
  bytes data = 1;
}

// Compressed ECDSA public key in DER format
message PubKey {
  bytes data = 1;
}

// 256-bit Secret, 32 bytes
// Can be used for revocation hash pre-image, shared secrets, etc.
message Secret {
  bytes data = 1;
}

// BIP-0032 Seed, must be between 16 and 64 bytes (inclusive) in length.
message BIP32Seed {
  bytes data = 1;
}

// A Bitcoin serialized transaction with additional metadata if needed
// for signing and validation
message Transaction {
  // The raw bytes of the transaction to be signed.
  bytes raw_tx_bytes = 1;

  // A set of sign descriptors, for each input to be signed.
  // TODO the input amount for the commitment tx should be specified
  // in NewChannel instead of here
  repeated InputDescriptor input_descs = 2;
  
  // A set of sign descriptors, for each output.
  repeated OutputDescriptor output_descs = 3;
}

// Basepoints and funding pubkey for one side of a channel
message Basepoints {
  PubKey revocation = 1;
  PubKey payment = 2;
  PubKey htlc = 3;
  PubKey delayed_payment = 4;
  PubKey funding_pubkey = 5;
}

// DER encoded SECP256K1_ECDSA Signature
message ECDSASignature {
  bytes data = 1;
}

// Compact ECDSA signature (64 bytes) + recovery id (1 byte) = 65 bytes
message ECDSARecoverableSignature {
  bytes data = 1;
}

// DER encoded Bitcoin Signature
message BitcoinSignature {
  bytes data = 1;
}

// BIP-32 Extended Public Key (base58 encoded, up to 112 chars)
message ExtPubKey {
  string encoded = 1;
}

// ----------------------------------------------------------------

message UnilateralCloseInfo {
  // Identifies the old channel closed unilaterally by the peer.
  ChannelNonce channel_nonce = 1;

  // Will be None if this is not a CommitmentType::LEGACY channel.
  PubKey commitment_point = 2;
}

message KeyLocator {
  /// Vector of leaf key_indices representing a BIP32 key derivation
  /// path.  This elements of this path are appended as non-hardened
  /// children to the fixed base path appropriate for each wallet
  /// layout implied by KeyDerivationStyle.  The number of key_path
  /// elements must also match the KeyDerivationStyle.
  repeated uint32 key_path = 1;

  // Provided instead of key_path if input is payment output from
  // unilateral close by peer on old channel (ie not in the wallet
  // proper).
  UnilateralCloseInfo close_info = 2;
}

enum SpendType {
  INVALID = 0;
  P2PKH = 1;
  P2WPKH = 3;
  P2SH_P2WPKH = 4;
}

message InputDescriptor {
  KeyLocator key_loc = 1;

  int64 value_sat = 2;

  SpendType spend_type = 3;

  bytes redeem_script = 4;
}

message OutputDescriptor {
  KeyLocator key_loc = 1;

  // Empty for p2pkh outputs.
  bytes witscript = 2;
}

message Witness {
  BitcoinSignature signature = 1;

  PubKey pubkey = 2;
}
  
// PHASE 2 messages
// ----------------

// These messages will be used in an updated API that constructs and
// signs the commitment and HTLC transactions from elementary info,
// rather than sending the serialized transaction on the wire.

// Sign the counterparty commitment
message SignCounterpartyCommitmentTxPhase2Request {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  CommitmentInfo commitment_info = 4;
}

// Sign the holder commitment
message SignHolderCommitmentTxPhase2Request {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  // per_commitment_point will not be populated
  CommitmentInfo commitment_info = 4;
}

message CommitmentTxSignatureReply {
  BitcoinSignature signature = 1;
  repeated BitcoinSignature htlc_signatures = 2;
}

message SignMutualCloseTxPhase2Request {
  NodeId node_id = 1;

  ChannelNonce channel_nonce = 2;

  // Value to holder in satoshi, may be zero if dust
  uint64 to_holder_value_sat = 3;

  // Value to counterparty in satoshi, may be zero if dust
  uint64 to_counterparty_value_sat = 4;

  // Counterparty shutdown script, if not previously specified
  bytes counterparty_shutdown_script = 5;
}

message CloseTxSignatureReply {
  BitcoinSignature signature = 1;
}


// Information required to create HTLC output and a follow-up HTLC transaction
message HTLCInfo {
  // The value in satoshis
  uint64 value_sat = 1;
  bytes payment_hash = 2;
  uint32 cltv_expiry = 3;
}

// Information required to construct a commitment transaction.
//
// The notions of "holder" "counterparty", "offered" and "received" are from
// the point of view of the transaction's broadcaster.  For example, when signing a
// counterparty commitment tx, "holder" is the counterparty.
// TODO: change these to broadcaster/countersignatory
message CommitmentInfo {
  // Feerate, for building HTLC transactions
  uint32 feerate_sat_per_kw = 1;

  // Commitment number
  uint64 n = 2;

  // Value to holder in satoshi
  uint64 to_holder_value_sat = 4;

  // Value to counterparty in satoshi
  uint64 to_counterparty_value_sat = 5;

  // Per-commitment point generated by the transaction's broadcaster.
  // Omitted if this is a holder-broadcast transaction, because the signer can compute it.
  PubKey per_commitment_point = 6;

  // Offered HTLC info
  repeated HTLCInfo offered_htlcs = 10;

  // Received HTLC info
  repeated HTLCInfo received_htlcs = 11;
}

// A Bitcoin outpoint, used for the funding output
message Outpoint {
  bytes txid = 1;	// byte order is same as txhash, reverse to display
  uint32 index = 2;
}


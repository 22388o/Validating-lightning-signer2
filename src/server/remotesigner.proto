syntax = "proto3";

package remotesigner;

service Signer {
  rpc Ping(PingRequest)
    returns (PingReply);

  rpc Init (InitRequest)
    returns (InitReply);

  // BOLT #2 - Peer Protocol
  rpc NewChannel (NewChannelRequest)
    returns (NewChannelReply);

  // BOLT #2 - Channel Close
  rpc SignMutualCloseTx (SignMutualCloseTxRequest)
    returns (SignMutualCloseTxReply);

  // BOLT #2 - Message Retransmission
  rpc CheckFutureSecret (CheckFutureSecretRequest)
    returns (CheckFutureSecretReply);
  
  // BOLT #3 - Key Derivation
  rpc GetChannelBasepoints (GetChannelBasepointsRequest)
    returns (GetChannelBasepointsReply);
    
  // BOLT #3 - Per-commitment Secret Requirements
  rpc GetPerCommitmentPoint (GetPerCommitmentPointRequest)
    returns (GetPerCommitmentPointReply);

  // BOLT #3 - Funding Transaction
  rpc SignFundingTx (SignFundingTxRequest)
    returns (SignFundingTxReply);
    
  // BOLT #3 - Commitment Transaction
  rpc SignRemoteCommitmentTx (SignRemoteCommitmentTxRequest)
    returns (SignRemoteCommitmentTxReply);

  // BOLT #3 - Commitment Transaction
  rpc SignCommitmentTx (SignCommitmentTxRequest)
    returns (SignCommitmentTxReply);
    
  // BOLT #3 - HTLC Outputs
  rpc SignLocalHTLCTx (SignLocalHTLCTxRequest)
    returns (SignLocalHTLCTxReply);
    
  // BOLT #5 - Unilateral Close Handling
  rpc SignDelayedPaymentToUs (SignDelayedPaymentToUsRequest)
    returns (SignDelayedPaymentToUsReply);
    
  // BOLT #3 - HTLC Outputs
  rpc SignRemoteHTLCTx (SignRemoteHTLCTxRequest)
    returns (SignRemoteHTLCTxReply);

  // BOLT #3 - HTLC Outputs
  rpc SignRemoteHTLCToUs (SignRemoteHTLCToUsRequest)
    returns (SignRemoteHTLCToUsReply);
    
  // BOLT #5 - Unilateral Close Handling
  rpc SignPenaltyToUs (SignPenaltyToUsRequest)
    returns (SignPenaltyToUsReply);

  // BOLT #7 - channel_announcement
  rpc SignChannelAnnouncement (SignChannelAnnouncementRequest)
    returns (SignChannelAnnouncementReply);

  // BOLT #7 - node_announcement
  rpc SignNodeAnnouncement (SignNodeAnnouncementRequest)
    returns (SignNodeAnnouncementReply);

  // BOLT #7 - channel_update
  rpc SignChannelUpdate (SignChannelUpdateRequest)
    returns (SignChannelUpdateReply);

  // BOLT #8 - Authenticated Key Agreement Handshake
  rpc ECDH (ECDHRequest)
    returns (ECDHReply);

  // BOLT #11 - Invoice Protocol
  rpc SignInvoice (SignInvoiceRequest)
    returns (SignInvoiceReply);

  // BOLT #?? - Sign Message
  rpc SignMessage (SignMessageRequest)
    returns (SignMessageReply);
}

service Version {
  rpc Version (VersionRequest) returns (VersionReply);
}

// ----------------------------------------------------------------

message PingRequest {
  string message = 1;
}

message PingReply {
  string message = 1;
}

message InitRequest {
  BIP32KeyVersion key_version = 1;
    
  ChainParams chainparams = 2;

  // HACK: send the secret instead of generating.
  Secret hsm_secret = 100;
}

message InitReply {
  NodeId self_node_id = 1;
}

message NewChannelRequest {
  NodeId self_node_id = 1;

  // optional
  bytes channel_nonce = 2;

  // in satoshis
  uint64 channel_value = 3;

  uint64 capabilities = 4;
}

message NewChannelReply {
  bytes channel_nonce = 1;
}

message SignMutualCloseTxRequest {
  NodeId self_node_id = 1;
    
  bytes channel_nonce = 2;

  Transaction tx = 3;
  
  PubKey remote_funding_pubkey = 4;
}

message SignMutualCloseTxReply {
  BitcoinSignature signature = 1;
}

message CheckFutureSecretRequest {
  NodeId self_node_id = 1;

  bytes channel_nonce = 2;

  uint64 n = 3;

  Secret suggested = 4;
}

message CheckFutureSecretReply {
  bool correct = 1;
}

message GetChannelBasepointsRequest {
  NodeId self_node_id = 1;
    
  bytes channel_nonce = 2;
}

message GetChannelBasepointsReply {
  Basepoints basepoints = 1;

  PubKey remote_funding_pubkey = 2;
}

message GetPerCommitmentPointRequest {
  NodeId self_node_id = 1;
    
  bytes channel_nonce = 2;
    
  uint64 n = 3;
}

message GetPerCommitmentPointReply {
  PubKey per_commitment_point = 1;
    
  Secret old_secret = 2;
}

message SignFundingTxRequest {
  NodeId self_node_id = 1;
  
  bytes channel_nonce = 2;

  Transaction tx = 3;
}

message SignFundingTxReply {
  repeated WitnessStack witnesses = 1;
}

message SignRemoteCommitmentTxRequest {
  NodeId self_node_id = 1;
  
  bytes channel_nonce = 2;
    
  Transaction tx = 3;
  
  PubKey remote_funding_pubkey = 4;

  PubKey remote_per_commit_point = 5;

  repeated bytes output_witscripts = 6;

  bool option_static_remotekey = 7;
}

message SignRemoteCommitmentTxReply {
  BitcoinSignature signature = 1;
}

message SignCommitmentTxRequest {
  NodeId self_node_id = 1;
  
  bytes channel_nonce = 2;
    
  Transaction tx = 3;
  
  PubKey remote_funding_pubkey = 4;
}

message SignCommitmentTxReply {
  BitcoinSignature signature = 1;
}

message SignLocalHTLCTxRequest {
  NodeId self_node_id = 1;

  bytes channel_nonce = 2;

  Transaction tx = 3;

  uint64 commit_num = 4;
  
  bytes wscript = 5;	// FIXME - find a better name
}

message SignLocalHTLCTxReply {
  BitcoinSignature signature = 1;
}

message SignDelayedPaymentToUsRequest {
  NodeId self_node_id = 1;
    
  bytes channel_nonce = 2;

  Transaction tx = 3;
  
  uint64 commit_num = 4;
  
  bytes wscript = 5;	// FIXME - find a better name
}

message SignDelayedPaymentToUsReply {
  BitcoinSignature signature = 1;
}

message SignRemoteHTLCTxRequest {
  NodeId self_node_id = 1;

  bytes channel_nonce = 2;

  Transaction tx = 3;

  PubKey remote_per_commit_point = 4;

  bytes wscript = 5;
}

message SignRemoteHTLCTxReply {
  BitcoinSignature signature = 1;
}

message SignRemoteHTLCToUsRequest {
  NodeId self_node_id = 1;

  bytes channel_nonce = 2;

  Transaction tx = 3;

  PubKey remote_per_commit_point = 4;

  bytes wscript = 5;
}

message SignRemoteHTLCToUsReply {
  BitcoinSignature signature = 1;
}

message SignPenaltyToUsRequest {
  NodeId self_node_id = 1;
    
  bytes channel_nonce = 2;

  Transaction tx = 3;

  Secret revocation_secret = 4;	// FIXME - is this remembered instead of passed?

  bytes wscript = 5;	// FIXME - find a better name
}

message SignPenaltyToUsReply {
  BitcoinSignature signature = 1;
}

message SignChannelAnnouncementRequest {
  NodeId self_node_id = 1;
  
  bytes channel_nonce = 2;

  bytes channel_announcement = 3;
}

message SignChannelAnnouncementReply {
  ECDSASignature node_signature = 1;

  ECDSASignature bitcoin_signature = 2;
}

message SignNodeAnnouncementRequest {
  NodeId self_node_id = 1;
  
  bytes node_announcement = 2;
}

message SignNodeAnnouncementReply {
  ECDSASignature signature = 1;
}

message SignChannelUpdateRequest {
  NodeId self_node_id = 1;

  bytes chain_hash = 2;

  uint64 short_channel_id = 3;

  uint32 timestamp = 4;

  uint32 message_flags = 5;	// uint8

  uint32 channel_flags = 6;	// uint8

  uint32 cltv_expiry_delta = 7;	// uint16

  uint64 htlc_minimum = 8;

  uint32 fee_base_msat = 9;

  uint32 fee_proportional_mill = 10;

  uint64 htlc_maximum = 11;
}

message SignChannelUpdateReply {
  ECDSASignature signature = 1;
}

message ECDHRequest {
  NodeId self_node_id = 1;
    
  PubKey point = 2;
}

message ECDHReply {
  Secret shared_secret = 1; // 32 bytes
}

message SignInvoiceRequest {
  NodeId self_node_id = 1;

  bytes data_part = 2;

  string human_readable_part = 3;
}

message SignInvoiceReply {
  ECDSARecoverableSignature signature = 1;
}

message SignMessageRequest {
  NodeId self_node_id = 1;

  bytes message = 2;
}

message SignMessageReply {
  ECDSARecoverableSignature signature = 1;
}

message VersionRequest {
}

message VersionReply {
  string version_string = 1;
  uint32 major = 2;
  uint32 minor = 3;
  uint32 patch = 4;
  string prerelease = 5;
  string build_metadata = 6;
}

// ----------------------------------------------------------------

message BIP32KeyVersion {
  uint32 pubkey_version = 1;
  uint32 privkey_version = 2;
}

message ChainParams {
  string network_name = 1;
  string bip173_name = 2;
  string bip70_name = 3;
  bytes genesis_blockhash = 4;
  int32 rpc_port = 5;
  string cli = 6;
  string cli_args = 7;
  uint64 cli_min_supported_version = 8;
  uint64 dust_limit_sat = 9;
  uint64 max_funding_sat = 10;
  uint64 max_payment_msat = 11;
  uint32 when_lightning_became_cool = 12;
  uint32 p2pkh_version = 13;
  uint32 p2sh_version = 14;
  bool testnet = 15;
  BIP32KeyVersion bip32_key_version = 16;
  bool is_elements = 17;
  bytes fee_asset_tag = 18;
}

message NodeId {
  // 33 bytes
  bytes data = 1;
}

message PubKey {
  // ECDSA PubKey, Compressed, 33 bytes
  bytes data = 1;
}

message Secret {
  // 256-bit Secret, 32 bytes
  bytes data = 1;
}

message Transaction {
  /// The raw bytes of the transaction to be signed.
  bytes raw_tx_bytes = 1;

  /// A set of sign descriptors, for each input to be signed.
  repeated SignDescriptor input_descs = 2;
  
  /// A set of sign descriptors, for each output.
  repeated SignDescriptor output_descs = 3;
}

message Basepoints {
  PubKey revocation = 1;
  PubKey payment = 2;
  PubKey htlc = 3;
  PubKey delayed_payment = 4;
}

message ECDSASignature {
  // DER encoded SECP256K1_ECDSA Signature
  bytes data = 1;
}

message ECDSARecoverableSignature {
  // Compact ECDSA signature (64 bytes) + recovery id (1 byte) = 65 bytes
  bytes data = 1;
}

message BitcoinSignature {
  // DER encoded Bitcoin Signature
  bytes data = 1;
}

message WitnessStack {
  // witness stack item
  repeated bytes item = 1;
}

// ----------------------------------------------------------------

message KeyLocator {
  /// The index of the key being identified.
  int32 key_index = 2;
}

message TxOut {
  /// The value of the output being spent.
  int64 value = 1;

  /// The script of the output being spent.
  bytes pk_script = 2;
}

message SignDescriptor {
  /**
     A descriptor that precisely describes *which* key to use for signing. This
     may provide the raw public key directly, or require the Signer to re-derive
     the key according to the populated derivation path.
  */
  KeyLocator key_loc = 1;

  /**
     A description of the output being spent. The value and script MUST be provided.
  */
  TxOut output = 5;
}

